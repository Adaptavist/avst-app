#!/bin/bash
# Copyright 2015 Adaptavist.com Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Exit failing on any error
set -e
# Ensure that all variables have been set
set -u

# if the product is bitbucket version 5 or above do not run
if [[ ${PRODUCT} == "bitbucket" && ${MAJOR_VER:-0} -ge 5 ]]; then
    debug "tomcat/modify/tomcat_set_vars: skipping as bitbucket >= 5 does not use server.xml for configuration"
else
    SERVER_XML_FILE="${TOMCAT_DIR}/conf/server.xml"

    [[ ! -r ${SERVER_XML_FILE} ]] && \
        fatal "tomcat/modify/tomcat_set_vars: Could not find server.xml" && \
        exit 1

    CONNECTOR_OUT=""
    AUGEAS_DOC=""


    MAX_THREADS="${MAX_THREADS:-150}"
    MAX_SPARE_THREADS="${MAX_SPARE_THREADS:-75}"
    MIN_SPARE_THREADS="${MIN_SPARE_THREADS:-25}"
    # take an index, attribute and value and add the set or rm to the
    # AUGEAS_DOC variable building the document to be applied.
    #
    # $1 node name
    # $2 index of the conenctor - required
    # $3 the attribute to set - required
    # $4 the value for the attribute - optional
    add_or_remove_connector () {
        node=$1
        index=$2
        attribute=$3
        set +u
        value=$4
        set -u
        if [[ -z "${value}" ]]; then
            AUGEAS_DOC=$(printf "${AUGEAS_DOC}\n\
rm \$service/$node[${index}]/#attribute/${attribute}")
        else
            AUGEAS_DOC=$(printf "${AUGEAS_DOC}\n\
set \$service/$node[${index}]/#attribute/${attribute} ${value}")
        fi
    }

    # Fix for ubuntu 12 and augeas 0.10 as it is not able to validate xml once it contains ''
    sed -i s/\'/\"/g "${SERVER_XML_FILE}"

    # The following CONNECTOR_COUNT logic and loop is to handle multiple connectors
    # being created in server.xml The first connector will have no suffix, but all
    # subsequent conennectors use a suffix. For example:
    # # connector 1
    # HTTP_PORT="8080"
    # PROXY_NAME="example.com"
    # # connector 2
    # HTTP_PORT_1="8081"
    # PROXY_NAME_1="adaptavist.com"
    # PROXY_PORT_1="443"
    # SCHEME_1="https"
    #
    # We first compute a sequance of _1 _2 etc if there is more than one conenctor
    # Then loop over those additional connectors, plus the first empty one using
    # eval echo to dynamically look up the variables

    # The first connector will not have an index
    # the seq -> tail generates _0 _1 etc and then drops the first one
    # The list we end up with is '' '_1' '_2' etc
    CONNECTOR_COUNT="${CONNECTOR_COUNT:-1}"
    ADDTITIONAL_SEQ=""
    [[ "${CONNECTOR_COUNT}" -gt "1" ]] && \
        ADDTITIONAL_SEQ=$(seq -f "_%g" 1 $((${CONNECTOR_COUNT} - 1)))

    index=1
    for i in '' ${ADDTITIONAL_SEQ} ; do
        # Disable variable checking for the dynamic variable lookup
        # These may legitimately be unset
        set +u
        #Port on which to start
        HTTP_PORT=$( eval echo \$"HTTP_PORT${i}" )
        HTTP_PORT=${HTTP_PORT:-"${DEFAULT_PORT}"}
        # scheme. Must be http or https
        SCHEME=$( eval echo \$"SCHEME${i}" )
        SCHEME=${SCHEME:-"http"}
        # reverse proxy name the canonical name of the server. Should match the base url minus the context path and scheme
        # For a site accessible at https://example.com/jira this should be set to example.com
        PROXY_NAME=$( eval echo \$"PROXY_NAME${i}" )
        # reverse proxy port for SSL use 443
        PROXY_PORT=$( eval echo \$"PROXY_PORT${i}" )
        # Note that the proxy URL can be constructed like this:
        # ${SCHEME}://${PROXY_NAME}:$PROXY_PORT
        PROTOCOL=$( eval echo \$"PROTOCOL${i}" )
        MAX_THREADS_FOR_CONNECTOR=$( eval echo \$"MAX_THREADS_FOR_CONNECTOR${i}" )
        MAX_THREADS_FOR_CONNECTOR=${MAX_THREADS_FOR_CONNECTOR:-$MAX_THREADS}
        MAX_SPARE_THREADS_FOR_CONNECTOR=$( eval echo \$"MAX_SPARE_THREADS_FOR_CONNECTOR${i}" )
        MAX_SPARE_THREADS_FOR_CONNECTOR=${MAX_SPARE_THREADS_FOR_CONNECTOR:-$MAX_SPARE_THREADS}
        MIN_SPARE_THREADS_FOR_CONNECTOR=$( eval echo \$"MIN_SPARE_THREADS_FOR_CONNECTOR${i}" )
        MIN_SPARE_THREADS_FOR_CONNECTOR=${MIN_SPARE_THREADS_FOR_CONNECTOR:-$MIN_SPARE_THREADS}
        MAX_PARAMETER_COUNT=$( eval echo \$"MAX_PARAMETER_COUNT${i}" )

        # check for content compression settings
        COMPRESSION=$( eval echo \$"CONNECTOR_COMPRESSION${i}" )
        COMPRESSION=${COMPRESSION:-}
        COMPRESSION_MIMETYPES=$( eval echo \$"CONNECTOR_COMPRESSION_MIMETYPES${i}" )
        COMPRESSION_MIMETYPES=${COMPRESSION_MIMETYPES:-"text/html,text/xml,text/plain,text/css,application/json,application/javascript"}

        # Re-enable variable checking
        set -u

        # TODO: Remove hardcoded values and add secure flag
        AUGEAS_DOC=$(printf "${AUGEAS_DOC}\n\
set \$service/Connector[${index}]/#attribute/acceptCount 100\n\
set \$service/Connector[${index}]/#attribute/connectionTimeout 20000\n\
set \$service/Connector[${index}]/#attribute/disableUploadTimeout true\n\
set \$service/Connector[${index}]/#attribute/enableLookups false\n\
set \$service/Connector[${index}]/#attribute/maxHttpHeaderSize 8192\n\
set \$service/Connector[${index}]/#attribute/maxSpareThreads ${MAX_SPARE_THREADS_FOR_CONNECTOR}\n\
set \$service/Connector[${index}]/#attribute/maxThreads ${MAX_THREADS_FOR_CONNECTOR}\n\
set \$service/Connector[${index}]/#attribute/minSpareThreads ${MIN_SPARE_THREADS_FOR_CONNECTOR}\n\
set \$service/Connector[${index}]/#attribute/redirectPort 8443\n\
set \$service/Connector[${index}]/#attribute/useBodyEncodingForURI true\n\
set \$service/Connector[${index}]/#attribute/URIEncoding UTF-8\n\
set \$service/Connector[${index}]/#attribute/relaxedPathChars []|\n\
set \$service/Connector[${index}]/#attribute/relaxedQueryChars []|{}^&#x5c;&#x60;&quot;&lt;&gt;\n\
set \$service/Connector[${index}]/#attribute/server Apache")

        #deal with content compressions options if set
        if [[ ! -z ${COMPRESSION} && ! -z ${COMPRESSION_MIMETYPES} ]]; then
            add_or_remove_connector "Connector" $index "compression" "${COMPRESSION}"
            add_or_remove_connector "Connector" $index "compressableMimeType" "${COMPRESSION_MIMETYPES}"
        fi

        if [[ "${SCHEME}" == "https" ]]; then
            add_or_remove_connector "Connector" $index "secure" "true"  
        fi
        add_or_remove_connector "Connector" $index "port" "${HTTP_PORT}"
        add_or_remove_connector "Connector" $index "scheme" "${SCHEME}"
        add_or_remove_connector "Connector" $index "proxyName" "${PROXY_NAME}"
        add_or_remove_connector "Connector" $index "proxyPort" "${PROXY_PORT}"
        add_or_remove_connector "Connector" $index "protocol" "${PROTOCOL}"

        # if there is a max parameter count defined add it to the connector, if not remove it
        add_or_remove_connector "Connector" $index "maxParameterCount" "${MAX_PARAMETER_COUNT}"

        index=$(( $index+1 ))
    done

    if [[ ! -z "${TOMCAT_RESOURCE_COUNT:-}" && 0 -ne ${TOMCAT_RESOURCE_COUNT} ]]; then
        TOMCAT_RESOURCE_COUNT="${TOMCAT_RESOURCE_COUNT:-0}"
        ADDTITIONAL_SEQ=""
        [[ "${TOMCAT_RESOURCE_COUNT}" -gt "1" ]] && \
            ADDTITIONAL_SEQ=$(seq -f "_%g" 1 $((${TOMCAT_RESOURCE_COUNT} - 1)))

        index=1
        for i in '' ${ADDTITIONAL_SEQ} ; do
            # Disable variable checking for the dynamic variable lookup
            # These may legitimately be unset
            set +u
            TOMCAT_RESOURCE_NAME=$( eval echo \$"TOMCAT_RESOURCE_NAME${i}" )
            TOMCAT_RESOURCE_AUTH=$( eval echo \$"TOMCAT_RESOURCE_AUTH${i}" )
            TOMCAT_RESOUTCE_TYPE=$( eval echo \$"TOMCAT_RESOUTCE_TYPE${i}" )
            TOMCAT_RESOURCE_FACTORY=$( eval echo \$"TOMCAT_RESOURCE_FACTORY${i}" )
            TOMCAT_RESOURCE_JOTM_TIMEOUT=$( eval echo \$"TOMCAT_RESOURCE_JOTM_TIMEOUT${i}" )
            TOMCAT_RESOURCE_SMTP_HOST=$( eval echo \$"TOMCAT_RESOURCE_SMTP_HOST${i}" )
            TOMCAT_RESOURCE_SMTP_PORT=$( eval echo \$"TOMCAT_RESOURCE_SMTP_PORT${i}" )
            TOMCAT_RESOURCE_SMTP_AUTH=$( eval echo \$"TOMCAT_RESOURCE_SMTP_AUTH${i}" )
            TOMCAT_RESOURCE_SMTP_USER=$( eval echo \$"TOMCAT_RESOURCE_SMTP_USER${i}" )
            TOMCAT_RESOURCE_SMTP_PASS=$( eval echo \$"TOMCAT_RESOURCE_SMTP_PASS${i}" )
            TOMCAT_RESOURCE_SMTP_STARTTLS=$( eval echo \$"TOMCAT_RESOURCE_SMTP_STARTTLS${i}" )
            TOMCAT_RESOURCE_SMTP_TRANSPORT_PROTOCOL=$( eval echo \$"TOMCAT_RESOURCE_SMTP_TRANSPORT_PROTOCOL${i}" )
            # Re-enable variable checking
            set -u

            # TODO: Remove hardcoded values and add secure flag

            add_or_remove_connector "Engine/Host/Context/Resource" $index "name" "${TOMCAT_RESOURCE_NAME}"
            add_or_remove_connector "Engine/Host/Context/Resource" $index "auth" "${TOMCAT_RESOURCE_AUTH}"
            add_or_remove_connector "Engine/Host/Context/Resource" $index "type" "${TOMCAT_RESOUTCE_TYPE}"
            # if this is a UserTransaction type set values
            if [[ "${TOMCAT_RESOUTCE_TYPE}" == "javax.transaction.UserTransaction" ]]; then
                add_or_remove_connector "Engine/Host/Context/Resource" $index "factory" "${TOMCAT_RESOURCE_FACTORY}"
                add_or_remove_connector "Engine/Host/Context/Resource" $index "jotm.timeout" "${TOMCAT_RESOURCE_JOTM_TIMEOUT}"
            # if this is a javax.mail.Session type set values
            elif [[ "${TOMCAT_RESOUTCE_TYPE}" == "javax.mail.Session" ]]; then
                add_or_remove_connector "Engine/Host/Context/Resource" $index "mail.smtp.host" "${TOMCAT_RESOURCE_SMTP_HOST}"
                add_or_remove_connector "Engine/Host/Context/Resource" $index "mail.smtp.port" "${TOMCAT_RESOURCE_SMTP_PORT}"
                add_or_remove_connector "Engine/Host/Context/Resource" $index "mail.smtp.auth" "${TOMCAT_RESOURCE_SMTP_AUTH}"
                # if there is a user set the value
                if [[ ! -z ${TOMCAT_RESOURCE_SMTP_USER} ]]; then
                    add_or_remove_connector "Engine/Host/Context/Resource" $index "mail.smtp.user" "${TOMCAT_RESOURCE_SMTP_USER}"
                fi
                # if there is a password set the value
                if [[ ! -z ${TOMCAT_RESOURCE_SMTP_PASS} ]]; then
                    add_or_remove_connector "Engine/Host/Context/Resource" $index "password" "${TOMCAT_RESOURCE_SMTP_PASS}"
                fi
                add_or_remove_connector "Engine/Host/Context/Resource" $index "mail.smtp.starttls.enable" "${TOMCAT_RESOURCE_SMTP_STARTTLS}"
                add_or_remove_connector "Engine/Host/Context/Resource" $index "mail.transport.protocol" "${TOMCAT_RESOURCE_SMTP_TRANSPORT_PROTOCOL}"

            fi
            
            index=$(( $index+1 ))
        done

    fi

    if [[ ! -z ${JVM_ROUTE:-} ]]; then
        JVM_ROUTE_CMD="set \$service/Engine/#attribute/jvmRoute ${JVM_ROUTE}"
    fi

    if [[ ! -z ${JNDI_SOURCE_NAME:-} ]]; then

        JNDI_SOURCE_CMD=$(printf "set \$service/Engine/Host/Context/Resource/#attribute/name ${JNDI_SOURCE_NAME} \n\
set \$service/Engine/Host/Context/Resource/#attribute/auth ${JNDI_SOURCE_AUTH:-'Container'}\n\
set \$service/Engine/Host/Context/Resource/#attribute/type ${JNDI_SOURCE_TYPE:-'javax.sql.DataSource'}\n\
set \$service/Engine/Host/Context/Resource/#attribute/username ${JNDI_SOURCE_USERNAME}\n\
set \$service/Engine/Host/Context/Resource/#attribute/password ${JNDI_SOURCE_PASSWORD}\n\
set \$service/Engine/Host/Context/Resource/#attribute/maxActive ${JNDI_SOURCE_MAX_ACTIVE:-'100'}\n\
set \$service/Engine/Host/Context/Resource/#attribute/maxIdle ${JNDI_SOURCE_MAX_IDLE:-'10'}\n\
set \$service/Engine/Host/Context/Resource/#attribute/driverClassName ${JNDI_SOURCE_DRIVER_CLASS_NAME:-'org.postgresql.Driver'}\n\
set \$service/Engine/Host/Context/Resource/#attribute/url ${JNDI_SOURCE_URL}\n\
set \$service/Engine/Host/Context/Resource/#attribute/validationQuery ${JNDI_SOURCE_VALIDATION_QUERY:-'Select 1'}")

    fi

    augtool -LA ${AUGTOOL_DEBUG} <<EOF
set /augeas/load/xml/lens "Xml.lns"
set /augeas/load/xml/incl "${SERVER_XML_FILE}"
load
defvar server_xml "/files/${SERVER_XML_FILE}"
defvar service \$server_xml/Server/Service
set \$server_xml/Server/#attribute/port "${SHUTDOWN_PORT}"
rm \$service/Connector[*]
rm \$service/#comment
rm \$service/#text

rm \$service/Engine/Host
set \$service/Engine/Host/#attribute/appBase webapps
set \$service/Engine/Host/#attribute/autoDeploy true
set \$service/Engine/Host/#attribute/name localhost
set \$service/Engine/Host/#attribute/unpackWARs true
set \$service/Engine/Host/Context/#attribute/path "${CONTEXT_PATH:-}"
set \$service/Engine/Host/Context/#attribute/docBase "${WEBAPP_DIR}"
set \$service/Engine/Host/Context/#attribute/debug 0
set \$service/Engine/Host/Context/Manager/#attribute/pathname ""
${AUGEAS_DOC}
${JVM_ROUTE_CMD:-}
${JNDI_SOURCE_CMD:-}
save
print /augeas//error

EOF
    # fix for any characters that had percentage signs in them
    sed -i 's/__PERCENTAGE_SIGN/\%/g' ${SERVER_XML_FILE}
fi